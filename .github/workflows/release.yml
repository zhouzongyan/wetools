name: Build And Release
on:
  push:
    tags:
      - "v*"
#    branches:
#      - main
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            output-name: wetools-windows.zip
            build-command: flutter build windows --release --split-debug-info=symbols --tree-shake-icons --dart-define=Dart_DEBUG=false --no-null-assertions
            artifact-path: build/windows/x64/runner/Release
            platform: windows
          - os: macos-latest
            output-name: wetools-macos.zip
            build-command: flutter build macos --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions --no-pub
            artifact-path: build/macos/Build/Products/Release/wetools.app
            platform: macos
          - os: ubuntu-latest
            output-name: wetools-linux.tar.gz
            build-command: flutter build linux --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions
            artifact-path: build/linux/x64/release/bundle
            platform: linux
          - os: ubuntu-latest
            output-name: wetools-android.apk
            build-command: flutter build apk --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions
            artifact-path: build/app/outputs/flutter-apk/app-release.apk
            platform: android
          - os: macos-latest
            output-name: wetools-ios.ipa
            build-command: flutter build ios --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions --no-codesign
            artifact-path: build/ios/iphoneos
            platform: ios
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'
          channel: 'stable'

      # 添加 Android 构建相关配置
      - name: Set up Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置 Android SDK
      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      # 配置 Android 签名
      - name: Setup Android Signing
        if: matrix.platform == 'android'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

      # 设置 iOS 构建环境
      - name: Setup iOS build environment
        if: matrix.platform == 'ios'
        run: |
          # 安装必要的工具
          brew install xcbeautify
          
          # 设置 iOS 项目配置
          cd ios
          # 更新 Bundle ID
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier top.caoayu.wetools" Runner/Info.plist
          # 更新版本号
          VERSION=$(echo ${{ github.ref_name }} | sed 's/v//')
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" Runner/Info.plist
          cd ..

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev libayatana-appindicator3-dev

      - name: Get dependencies
        run: flutter pub get

      # 添加 macOS 最低部署版本设置
      - name: Set macOS deployment target
        if: matrix.os == 'macos-latest' && matrix.platform == 'macos'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=10.14.6" >> $GITHUB_ENV
          
          # 修改 Xcode 项目设置
          /usr/libexec/PlistBuddy -c "Set :LSMinimumSystemVersion 10.14.6" macos/Runner/Info.plist
          
          # 修改 Bundle ID
          plutil -replace CFBundleIdentifier -string "top.caoayu.wetools" macos/Runner/Info.plist
          
          # 修改 Podfile
          echo "platform :osx, '10.14.6'" > macos/Podfile.new
          tail -n +2 macos/Podfile >> macos/Podfile.new
          mv macos/Podfile.new macos/Podfile
          
          # 修改 Xcode 项目配置
          sed -i '' 's/MACOSX_DEPLOYMENT_TARGET = .*/MACOSX_DEPLOYMENT_TARGET = 10.14.6;/' macos/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = "top.caoayu.wetools";/' macos/Runner.xcodeproj/project.pbxproj
          
          # 运行 pod install
          cd macos && pod install && cd ..

      # 为 iOS 运行 pod install
      - name: Install iOS pods
        if: matrix.platform == 'ios'
        run: |
          cd ios && pod install && cd ..

      - name: Build application
        run: |
          flutter config --enable-windows-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-linux-desktop
          flutter config --enable-android
          flutter config --enable-ios
          ${{ matrix.build-command }}

      # 添加平台对应的打包步骤
      - name: Package Artifact for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ matrix.artifact-path }}\*" -DestinationPath "wetools-windows.zip"

      - name: Package Artifact for macOS
        if: matrix.os == 'macos-latest' && matrix.platform == 'macos'
        run: |
          # macOS 下可以用 ditto 命令打包为 zip 文件
          ditto -c -k --sequesterRsrc --keepParent "${{ matrix.artifact-path }}" wetools-macos.zip

      - name: Package Artifact for Linux
        if: matrix.os == 'ubuntu-latest' && matrix.platform == 'linux'
        run: |
          # 打包为 tar.gz 文件
          tar -czvf wetools-linux.tar.gz -C "${{ matrix.artifact-path }}" .

      # 添加 Android APK 复制步骤
      - name: Copy Android APK
        if: matrix.platform == 'android'
        run: |
          cp "${{ matrix.artifact-path }}" wetools-android.apk

      # 为 iOS 创建 IPA 文件
      - name: Create iOS IPA
        if: matrix.platform == 'ios'
        run: |
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload
          zip -r wetools-ios.ipa Payload
          mv wetools-ios.ipa ../../../
          cd ../../../

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            ${{ matrix.os == 'windows-latest' && 'wetools-windows.zip' || '' }}
            ${{ (matrix.os == 'macos-latest' && matrix.platform == 'macos') && 'wetools-macos.zip' || '' }}
            ${{ (matrix.os == 'ubuntu-latest' && matrix.platform == 'linux') && 'wetools-linux.tar.gz' || '' }}
            ${{ matrix.platform == 'android' && 'wetools-android.apk' || '' }}
            ${{ matrix.platform == 'ios' && 'wetools-ios.ipa' || '' }}

      # 注释掉或删除这些步骤
      # - name: Import Certificate
      #   if: matrix.os == 'macos-latest'
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
      #     p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      # - name: Sign and Notarize
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     codesign --force --deep --sign "${{ secrets.APPLE_DEVELOPER_IDENTITY }}" "${{ matrix.artifact-path }}"
      #     ditto -c -k --sequesterRsrc --keepParent "${{ matrix.artifact-path }}" wetools-macos.zip
      #     xcrun notarytool submit wetools-macos.zip --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait

  release:
    runs-on: ubuntu-latest
    needs: build    # 恢复构建依赖
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Show workspace and files
        run: |
          pwd
          ls -la
          echo "Current directory contents:"
          tree -L 3 -a --dirsfirst
          echo "CHANGELOG.md contents:"
          cat CHANGELOG.md || echo "CHANGELOG.md not found"

      - name: Get Release Notes
        id: release_notes
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "Error: CHANGELOG.md not found"
            exit 1
          fi
          VERSION=$(echo ${{ github.ref_name }} | sed 's/v//')
          NOTES=$(awk -v ver="$VERSION" '
            /^## \[v'$VERSION'\]/ {
              p=1;
              next
            }
            /^## \[v[0-9]+\.[0-9]+\.[0-9]+\]/ {
              p=0
            }
            p {
              print
            }
          ' CHANGELOG.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload Release Assets - Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux/wetools-linux.tar.gz
          asset_name: wetools-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets - Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/wetools-windows.zip
          asset_name: wetools-windows.zip
          asset_content_type: application/zip

      - name: Upload Release Assets - macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/wetools-macos.zip
          asset_name: wetools-macos.zip
          asset_content_type: application/zip
          
      - name: Upload Release Assets - Android
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/android/wetools-android.apk
          asset_name: wetools-android.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Upload Release Assets - iOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/ios/wetools-ios.ipa
          asset_name: wetools-ios.ipa
          asset_content_type: application/octet-stream